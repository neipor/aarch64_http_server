# ANX Server Configuration

http {
    # This is a comment
    workers 4;
    
    # 负载均衡上游服务器组定义 - Load Balancer Upstream Groups
    upstream backend_api {
        server 127.0.0.1:3000 weight=3 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:3001 weight=2 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:3002 weight=1 max_fails=3 fail_timeout=30s;
        least_conn;  # 使用最少连接算法
        
        # 健康检查配置 - Health Check Configuration
        health_check on;
        health_check_uri /health;
        health_check_method GET;
        health_check_interval 30;
        health_check_timeout 10;
        health_check_type http;
        health_check_rise 2;
        health_check_fall 3;
        health_check_expected_response "OK";
    }
    
    upstream backend_admin {
        server 127.0.0.1:4000 weight=1 max_fails=2 fail_timeout=20s;
        server 127.0.0.1:4001 weight=1 max_fails=2 fail_timeout=20s;
        ip_hash;  # 使用IP哈希算法
        
        # 健康检查配置 - Health Check Configuration
        health_check on;
        health_check_uri /admin/health;
        health_check_method GET;
        health_check_interval 15;
        health_check_timeout 5;
        health_check_type http;
        health_check_rise 2;
        health_check_fall 2;
        health_check_headers "Authorization: Bearer health-check-token";
    }
    
    upstream backend_microservice {
        server 192.168.1.100:8080 weight=2;
        server 192.168.1.101:8080 weight=2;
        server 192.168.1.102:8080 weight=1;
        # 默认使用轮询算法
        
        # 健康检查配置 - Health Check Configuration  
        health_check on;
        health_check_uri /status;
        health_check_method GET;
        health_check_interval 20;
        health_check_timeout 8;
        health_check_type http;
        health_check_rise 3;
        health_check_fall 3;
        health_check_expected_response "healthy";
    }
    
    # 基于TCP的健康检查示例
    upstream backend_tcp_service {
        server 127.0.0.1:5000 weight=1;
        server 127.0.0.1:5001 weight=1;
        
        # TCP健康检查配置 - TCP Health Check Configuration
        health_check on;
        health_check_type tcp;
        health_check_interval 10;
        health_check_timeout 5;
        health_check_rise 2;
        health_check_fall 3;
        health_check_port 5000;  # 如果健康检查端口不同
    }

    # 日志配置 - Logging Configuration
    error_log ./logs/error.log;
    access_log ./logs/access.log;
    log_level info;
    log_format combined;
    log_rotation_size 100;
    log_rotation_days 7;
    performance_logging on;

    # 压缩配置 - Compression Configuration
    gzip on;
    gzip_comp_level 6;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/javascript application/javascript 
              application/json application/xml text/xml application/x-javascript
              text/html;
    gzip_vary on;
    gzip_buffers 32 4k;
    
    # 缓存配置 - Cache Configuration
    proxy_cache on;
    proxy_cache_max_size 128m;
    proxy_cache_max_entries 5000;
    proxy_cache_ttl 3600;
    proxy_cache_strategy lru;
    proxy_cache_types text/html text/css text/javascript application/javascript 
                     application/json text/plain image/jpeg image/png image/gif 
                     image/webp image/svg+xml;
    proxy_cache_min_size 1024;
    proxy_cache_max_file_size 5m;
    proxy_cache_etag on;
    proxy_cache_last_modified on;

    # 静态文件服务器
    server {
        listen 8080;
        server_name localhost;
        
        # 添加全局头部操作
        add_header X-Server-Name ANX-HTTP-Server;
        add_header X-Version 0.5.0;
        
        # 静态文件根目录
        location / {
            root ./www;
            # 为静态文件添加缓存控制头部
            add_header Cache-Control public-max-age-3600;
        }
        
        # API代理到负载均衡组
        location /api {
            proxy_pass http://backend_api;
            # 为API路由添加CORS头部
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods GET-POST-PUT-DELETE-OPTIONS;
            add_header Access-Control-Allow-Headers Content-Type-Authorization;
        }
        
        # 管理接口代理到负载均衡组
        location /admin {
            proxy_pass http://backend_admin;
            # 为管理界面添加安全头部
            add_header X-Frame-Options DENY;
            add_header X-Content-Type-Options nosniff;
            add_header X-XSS-Protection 1-mode-block;
        }
    }

    # HTTPS服务器
    server {
        listen 8443 ssl;
        server_name localhost;
        ssl_certificate ./certs/server.crt;
        ssl_certificate_key ./certs/server.key;
        
        # 添加HTTPS安全头部
        add_header Strict-Transport-Security max-age-31536000-includeSubDomains;
        add_header X-Forwarded-Proto https;
        
        # 静态文件根目录
        location / {
            root ./www;
            # 为静态文件添加缓存控制头部
            add_header Cache-Control public-max-age-7200;
        }
        
        # API代理到负载均衡组
        location /api {
            proxy_pass http://backend_api;
            # 为API路由添加CORS和安全头部
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods GET-POST-PUT-DELETE-OPTIONS;
            add_header Access-Control-Allow-Headers Content-Type-Authorization;
        }
        
        # 微服务代理到负载均衡组
        location /service {
            proxy_pass http://backend_microservice;
            # 为微服务添加安全头部
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Content-Type-Options nosniff;
            add_header Referrer-Policy strict-origin-when-cross-origin;
        }
    }
} 